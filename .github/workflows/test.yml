name: Unit Tests

# 触发条件：推送到main分支或创建拉取请求时自动运行
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# 允许手动触发工作流
  workflow_dispatch:

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    
    # 权限配置：允许发布测试结果和检查状态
    permissions:
      contents: read
      checks: write
      pull-requests: write
      actions: read
    
    # 支持多个Python版本的矩阵测试
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
      fail-fast: false
    
    steps:
    # 1. 检出代码
    - name: Checkout code
      uses: actions/checkout@v4
      
    # 2. 设置Python环境
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    # 3. 安装PDM
    - name: Install PDM
      run: |
        python -m pip install --upgrade pip
        pip install pdm
        
    # 4. 配置PDM缓存
    - name: Cache PDM dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pdm
          .venv
        key: ${{ runner.os }}-pdm-${{ matrix.python-version }}-${{ hashFiles('pdm.lock') }}
        restore-keys: |
          ${{ runner.os }}-pdm-${{ matrix.python-version }}-
          
    # 5. 安装项目依赖
    - name: Install dependencies
      run: |
        pdm install --dev
        
    # 6. 代码质量检查（可选）
    - name: Lint with flake8
      run: |
        # 停止构建如果有Python语法错误或未定义的名称
        pdm run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # 将其他问题作为警告处理
        pdm run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
      
    # 7. 执行单元测试并生成覆盖率报告
    - name: Run tests with pytest
      run: |
        mkdir -p reports
        pdm run pytest tests/ \
          --verbose \
          --cov=src/aetherflow \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --html=reports/pytest_report.html \
          --self-contained-html \
          --junitxml=reports/junit.xml
          
    # 8. 上传测试报告
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-python-${{ matrix.python-version }}
        path: |
          reports/
          htmlcov/
          coverage.xml
        retention-days: 30
        
    # 9. 上传覆盖率到Codecov（可选）
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    # 10. 发布测试结果
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: reports/junit.xml
        check_name: "Unit Test Results (Python ${{ matrix.python-version }})"
        comment_mode: always
        
  # 汇总作业：确保所有测试都通过
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "✅ All tests passed successfully!"
        else
          echo "❌ Some tests failed!"
          exit 1
        fi
        
    - name: Report status
      run: |
        echo "## 🧪 Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Python Version | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|----------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 3.10 | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 3.11 | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 3.12 | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 Test reports and coverage data are available in the artifacts." >> $GITHUB_STEP_SUMMARY