name: Publish to PyPI

on:
  # 当创建release时自动发布到PyPI
  release:
    types: [published]

  # 当推送版本标签时发布（更安全的触发方式）
  push:
    tags:
      - 'v*.*.*'  # 匹配 v1.0.0, v0.1.0 等格式的标签

  # 允许手动触发（用于测试或紧急发布）
  workflow_dispatch:
    inputs:
      target:
        description: 'Publish target'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - testpypi
          - pypi
      version_check:
        description: 'Skip version validation'
        required: false
        default: false
        type: boolean

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: release  # 使用环境保护
    permissions:
      id-token: write  # 用于可信发布
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install PDM
      run: |
        pip install --upgrade pip
        pip install pdm

    - name: Install dependencies
      run: pdm install -dG dev

    - name: Run tests
      run: pdm run pytest

    - name: Run linting
      run: |
        pdm run ruff check .
        pdm run ruff format --check .

    # - name: Run type checking
    #   run: pdm run mypy src/

    - name: Build package
      run: pdm build

    - name: Check package
      run: |
        pip install twine
        twine check dist/*

    - name: Publish to TestPyPI
      if: |
        (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'testpypi') ||
        (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*

    - name: Upload wheel and sdist to Release
      if: |
        (github.event_name == 'release') ||
        (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
      run: |
        # 获取标签名称
        if [ "${{ github.event_name }}" == "release" ]; then
          TAG_NAME="${{ github.event.release.tag_name }}"
        else
          TAG_NAME="${GITHUB_REF#refs/tags/}"
        fi

        # 检查是否存在对应的Release，如果不存在则创建
        if ! gh release view "$TAG_NAME" >/dev/null 2>&1; then
          gh release create "$TAG_NAME" --title "Release $TAG_NAME" --notes "Automated release for $TAG_NAME"
        fi

        # 上传所有构建的文件到Release
        for file in dist/*; do
          gh release upload "$TAG_NAME" "$file" --clobber
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to PyPI
      if: |
        (github.event_name == 'release') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'pypi')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
